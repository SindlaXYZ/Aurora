name: PHPUnit

on:
    pull_request:
    push:
        branches:
            - "7.0"

env:
    fail-fast: true
    WORKSPACE: "${{ github.workspace }}"
    BUILD_DIR: "${{ github.workspace }}/build"
    # PHPUnit
    PHPUNIT: "${{ github.workspace }}/build/bin/phpunit"
    PHPUNIT_FLAGS: "--no-coverage" # for coverage tests, replace "--no-coverage" with: "--coverage-clover coverage.xml"
    # Symfony
    SYMFONY_VERSION: "7.0.x-dev" # 7.0.* / 7.0.x-dev
    SYMFONY_PHPUNIT_DIR: "$HOME/symfony-bridge/.phpunit"
    SYMFONY_DEPRECATIONS_HELPER: 0
    # Aurora
    AURORA_VERSION: "7.0"

permissions:
    contents: read

jobs:
    phpunit:
        name: "${{ matrix.operating-system }} / PHP ${{ matrix.php-version }}"
        runs-on: ${{ matrix.operating-system }}
        continue-on-error: false

        strategy:
            matrix:
                operating-system: [ 'ubuntu-22.04' ]
                php-version: [ '8.3' ]
# IT WORKS, BUT IT'S NOT NEEDED
#        services:
#            postgres:
#                image: postgres:16
#                env:
#                    POSTGRES_USER: POSTGRESQL_USERNAME
#                    POSTGRES_PASSWORD: POSTGRESQL_PASSWORD
#                    POSTGRES_DB: POSTGRESQL_DATABASE_test
#                ports:
#                    - 5432:5432
#                options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
        steps:
            -   name: "Checkout code"
                uses: actions/checkout@v4

            -   name: "Install PHP with extensions"
                uses: shivammathur/setup-php@v2
                with:
                    coverage: "none" # for coverage tests, replace "none" with "xdebug"
                    extensions: "intl, mbstring, pdo_pgsql, zip" # for coverage tests, append: ", xdebug"
                    php-version: ${{ matrix.php-version }}
                    tools: composer:v2

            -   name: "Add PHPUnit matcher"
                run: echo "::add-matcher::${{ runner.tool_cache }}/phpunit.json"

            -   name: "Set composer cache directory"
                id: composer-cache
                run: echo "dir=$(composer config cache-files-dir)" >> $GITHUB_OUTPUT
                shell: bash

            -   name: "Cache composer"
                uses: actions/cache@v4
                with:
                    path: ${{ steps.composer-cache.outputs.dir }}
                    key: ${{ runner.os }}-composer-${{ hashFiles('composer.lock') }}
                    restore-keys: ${{ runner.os }}-composer-

            -   name: "Install dependencies"
                run: |
                    composer install --ansi --no-interaction --no-progress
                    mkdir -p ${{ env.BUILD_DIR }}

            -   name: "Create a Symfony skeleton project and install dependencies, including sindla/aurora (dev version)"
                working-directory: ${{ env.BUILD_DIR }}
                run: |
                    echo -e "\033[0;35m * composer create-project symfony/skeleton \033[0m"
                    composer create-project symfony/skeleton:${{ env.SYMFONY_VERSION }} . --no-cache

                    echo -e "\033[0;35m * require symfony/webapp-pack \033[0m"
                    composer require symfony/webapp-pack

                    echo -e "\033[0;35m * composer require symfony/phpunit-bridge \033[0m"
                    composer require symfony/phpunit-bridge:${{ env.SYMFONY_VERSION }}

#                    echo -e "\033[0;35m * composer require phpunit/php-code-coverage \033[0m"
#                    composer require phpunit/php-code-coverage:^10.1
#
#                    echo -e "\033[0;35m * composer require phpunit/phpunit \033[0m"
#                    composer require phpunit/phpunit:^10.5

                    echo -e "\033[0;35m * composer require sindla/aurora \033[0m"
                    composer require sindla/aurora:${{ env.AURORA_VERSION }}.x-dev --no-cache --no-progress

                    cp -f ${{ github.workspace }}/src/Resources/schema/packages/aurora.yaml ${{ env.BUILD_DIR }}/config/packages/aurora.yaml
                    cat ${{ github.workspace }}/src/Resources/schema/routes.append.yaml >> ${{ env.BUILD_DIR }}/config/routes.yaml
                    cp -f ${{ github.workspace }}/phpunit.xml ${{ env.BUILD_DIR }}/phpunit.xml
                    cp -f ${{ github.workspace }}/phpunit.xml.dist ${{ env.BUILD_DIR }}/phpunit.xml.dist
                    cp -f vendor/bin/phpunit ${{ env.BUILD_DIR }}/bin/phpunit

            #            -   name: "Prepare database"
            #                run: |
            #                    sudo /usr/bin/php ${{ env.WORKSPACE }}/bin/console doctrine:database:create --env=test --if-not-exists
            #                    sudo /usr/bin/php ${{ env.WORKSPACE }}/bin/console doctrine:schema:update --force --env=test

            -   name: "Composer clear & autoloader dump"
                run: |
                    composer clear-cache
                    composer dump-autoload

#            -   name: "PHPUnit check 1/2"
#                run: |
#                    echo 'SED_STRICT_TYPES_FOUND<<EOF' >> $GITHUB_ENV
#                    echo $(grep -c "strict_types" ${{ env.BUILD_DIR }}/vendor/phpunit/phpunit/phpunit) >> $GITHUB_ENV
#                    echo 'EOF' >> $GITHUB_ENV
#                    echo "${{ env.SED_STRICT_TYPES_FOUND }}"
#
#            -   name: "PHPUnit check 2/2"
#                if: ${{ env.SED_STRICT_TYPES_FOUND == '1' || env.SED_STRICT_TYPES_FOUND == 1 }}
#                run: sed -i -e "s/<?php/<?php declare(strict_types=0);/g" ${{ env.BUILD_DIR }}/vendor/phpunit/phpunit/phpunit

            -   name: "Check versions"
                run: |
                    . /etc/os-release && echo $PRETTY_NAME
                    php --version
                    composer -V
                    vendor/bin/phpunit --version
                    ${{env.PHPUNIT}} --version
                    php -r "phpinfo();" | grep opcache.save_comments

#            -   name: "Test /Command"
#                run: /usr/bin/php ${{ env.BUILD_DIR }}/bin/phpunit ${{ env.PHPUNIT_FLAGS }} -c ${{ env.BUILD_DIR }}/phpunit.xml ${{ env.BUILD_DIR }}/vendor/sindla/aurora/tests/Command/ComposerCommandTest.php
#
#            -   name: "Test /Console"
#                run: /usr/bin/php ${{ env.BUILD_DIR }}/bin/phpunit ${{ env.PHPUNIT_FLAGS }} -c ${{ env.BUILD_DIR }}/phpunit.xml ${{ env.BUILD_DIR }}/vendor/sindla/aurora/tests/Console/SymfonyStyleFactoryTest.php
#
#            -   name: "Test /Controller"
#                run: /usr/bin/php ${{ env.BUILD_DIR }}/bin/phpunit ${{ env.PHPUNIT_FLAGS }} -c ${{ env.BUILD_DIR }}/phpunit.xml ${{ env.BUILD_DIR }}/vendor/sindla/aurora/tests/Controller/BlackHoleControllerTest.php
#
#            -   name: "Test /Entity"
#                run: |
#                    /usr/bin/php ${{env.PHPUNIT}} ${{ env.PHPUNIT_FLAGS }} -c ${{ env.BUILD_DIR }}/phpunit.xml ${{ env.BUILD_DIR }}/vendor/sindla/aurora/tests/Entity/SuperAnnotation/IdentifiableUUIDTest.php
#                    /usr/bin/php ${{env.PHPUNIT}} ${{ env.PHPUNIT_FLAGS }} -c ${{ env.BUILD_DIR }}/phpunit.xml ${{ env.BUILD_DIR }}/vendor/sindla/aurora/tests/Entity/SuperAnnotation/TemporalTraitTest.php
#
#            -   name: "Test /EventListener"
#                run: /usr/bin/php ${{ env.BUILD_DIR }}/bin/phpunit ${{ env.PHPUNIT_FLAGS }} -c ${{ env.BUILD_DIR }}/phpunit.xml ${{ env.BUILD_DIR }}/vendor/sindla/aurora/tests/EventListener/OutputSubscriberTest.php
#
#            -   name: "Test /Utils/AuroraCalendar"
#                run: /usr/bin/php ${{ env.BUILD_DIR }}/bin/phpunit ${{ env.PHPUNIT_FLAGS }} -c ${{ env.BUILD_DIR }}/phpunit.xml ${{ env.BUILD_DIR }}/vendor/sindla/aurora/tests/Utils/AuroraCalendar/AuroraCalendarTest.php
#
#            -   name: "Test /Utils/AuroraChronos"
#                run: /usr/bin/php ${{ env.BUILD_DIR }}/bin/phpunit ${{ env.PHPUNIT_FLAGS }} -c ${{ env.BUILD_DIR }}/phpunit.xml ${{ env.BUILD_DIR }}/vendor/sindla/aurora/tests/Utils/AuroraChronos/AuroraChronosTest.php
#
#            -   name: "Test /Utils/AuroraClient"
#                run: /usr/bin/php ${{ env.BUILD_DIR }}/bin/phpunit ${{ env.PHPUNIT_FLAGS }} -c ${{ env.BUILD_DIR }}/phpunit.xml ${{ env.BUILD_DIR }}/vendor/sindla/aurora/tests/Utils/AuroraClient/AuroraClientTest.php
#
#            -   name: "Test /Utils/AuroraMatch"
#                run: /usr/bin/php ${{ env.BUILD_DIR }}/bin/phpunit ${{ env.PHPUNIT_FLAGS }} -c ${{ env.BUILD_DIR }}/phpunit.xml ${{ env.BUILD_DIR }}/vendor/sindla/aurora/tests/Utils/AuroraMatch/AuroraMatchTest.php
#
#            -   name: "Test /Utils/Diacritics"
#                run: /usr/bin/php ${{ env.BUILD_DIR }}/bin/phpunit ${{ env.PHPUNIT_FLAGS }} -c ${{ env.BUILD_DIR }}/phpunit.xml ${{ env.BUILD_DIR }}/vendor/sindla/aurora/tests/Utils/Diacritics/DiacriticsTest.php
#
#            -   name: "Test /Utils/Helper"
#                run: /usr/bin/php ${{ env.BUILD_DIR }}/bin/phpunit ${{ env.PHPUNIT_FLAGS }} -c ${{ env.BUILD_DIR }}/phpunit.xml ${{ env.BUILD_DIR }}/vendor/sindla/aurora/tests/Utils/Helper/HelperTest.php
#
#            -   name: "Test /Utils/IO"
#                run: /usr/bin/php ${{ env.BUILD_DIR }}/bin/phpunit ${{ env.PHPUNIT_FLAGS }} -c ${{ env.BUILD_DIR }}/phpunit.xml ${{ env.BUILD_DIR }}/vendor/sindla/aurora/tests/Utils/IO/IOTest.php
#
#            -   name: "Test /Utils/Strink"
#                run: /usr/bin/php ${{ env.BUILD_DIR }}/bin/phpunit ${{ env.PHPUNIT_FLAGS }} -c ${{ env.BUILD_DIR }}/phpunit.xml ${{ env.BUILD_DIR }}/vendor/sindla/aurora/tests/Utils/Strink/StrinkTest.php
#
#            -   name: "Test /Utils/Twig"
#                run: /usr/bin/php ${{ env.BUILD_DIR }}/bin/phpunit ${{ env.PHPUNIT_FLAGS }} -c ${{ env.BUILD_DIR }}/phpunit.xml ${{ env.BUILD_DIR }}/vendor/sindla/aurora/tests/Utils/Twig/UtilityExtensionTest.php

            -   name: "Test FakeTest"
                run: |
                    /usr/bin/php ${{env.PHPUNIT}} ${{ env.PHPUNIT_FLAGS }} -c ${{ env.BUILD_DIR }}/phpunit.xml.dist ${{ env.BUILD_DIR }}/vendor/sindla/aurora/tests/FakeTest.php

#            -   name: "Test RequirementsTest"
#                run: |
#                    /usr/bin/php ${{env.PHPUNIT}} ${{ env.PHPUNIT_FLAGS }} -c ${{ env.BUILD_DIR }}/phpunit.xml ${{ env.BUILD_DIR }}/vendor/sindla/aurora/tests/RequirementsTest.php
