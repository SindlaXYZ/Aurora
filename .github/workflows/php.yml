name: PHPUnit

on:
    push:
        branches: [ "5.2" ]
    pull_request:
        branches: [ "5.2" ]

env:
    fail-fast: true
    PHPUNIT_FLAGS: "-v"
    SYMFONY_PHPUNIT_DIR: "$HOME/symfony-bridge/.phpunit"
    SYMFONY_REQUIRE: ">=5.2"
    working-directory: /home/runner/work/aurora

jobs:
    build:

        runs-on: ubuntu-latest

        steps:
            -   uses: actions/checkout@v2

            -   name: "mkdir"
                run: mkdir -p ${{env.working-directory}}/website-skeleton

            -   name: "Create project symfony/website-skeleton"
                run: composer create-project symfony/website-skeleton ${{env.working-directory}}/website-skeleton ^5.2.0 --no-cache

            -   name: "Move symfony/website-skeleton"
                run: mv -f ${{env.working-directory}}/website-skeleton/* ${{env.working-directory}}/website-skeleton/.[!.]* ${{env.working-directory}}/

            #
            # Works, no longer need it
            #
            #            -   name: "List"
            #                run: ls -a ${{env.working-directory}}

            -   name: "mkdir"
                run: mkdir -p ${{env.working-directory}}/vendor/sindla/aurora/

            -   name: "Copy A"
                run: cp -Rf /home/runner/work/Aurora/Aurora/* ${{env.working-directory}}/vendor/sindla/aurora/

            #            -   name: "Copy composer.json"
            #                run: cp -Rf ${{env.working-directory}}/vendor/sindla/aurora/composer.json ${{env.working-directory}}/composer.json

            -   name: "Copy phpunit.xml"
                run: cp -Rf ${{env.working-directory}}/vendor/sindla/aurora/phpunit.xml ${{env.working-directory}}/phpunit.xml

            -   name: "mkdir"
                run: mkdir -p ${{env.working-directory}}/tests/

            -   name: "Copy bootstrap.php"
                run: cp -Rf ${{env.working-directory}}/vendor/sindla/aurora/tests/bootstrap.php ${{env.working-directory}}/tests/bootstrap.php

            #            -   name: "Validate composer.json and composer.lock"
            #                run: composer validate
            #                working-directory: ${{env.working-directory}}

            #            -   name: "Cache Composer packages"
            #                id: composer-cache
            #                uses: actions/cache@v2
            #                with:
            #                    path: vendor
            #                    key: ${{ runner.os }}-php-${{ hashFiles('**/composer.lock') }}
            #                    restore-keys: |
            #                        ${{ runner.os }}-php-

            -   name: "Install dependencies"
                # if: steps.composer-cache.outputs.cache-hit != 'true'
                run: composer install --prefer-dist --no-progress --no-suggest --no-cache
                working-directory: ${{env.working-directory}}

            -   name: "Install sindla/aurora"
                # if: steps.composer-cache.outputs.cache-hit != 'true'
                run: composer require sindla/aurora
                working-directory: ${{env.working-directory}}

            -   name: "Overwrite sindla/aurora"
                run: cp -Rf /home/runner/work/Aurora/Aurora/* ${{env.working-directory}}/vendor/sindla/aurora/

            #
            # Works, no longer need it
            #
            #            -   name: "Install Simple PHPUnit"
            #                run: vendor/bin/simple-phpunit install
            #                working-directory: ${{env.working-directory}}
            #
            #            -   name: "Simple PHPUnit version"
            #                run: vendor/bin/simple-phpunit --version
            #                working-directory: ${{env.working-directory}}
            #
            #            -   name: "List"
            #                run: ls -a ${{env.working-directory}}
            #
            #            -   name: "List vendor"
            #                run: ls -a ${{env.working-directory}}/vendor/

            -   name: "Test RequirementsTest"
                run: /usr/bin/php ${{env.working-directory}}/bin/phpunit ${{ env.PHPUNIT_FLAGS }} -c ${{env.working-directory}}/phpunit.xml ${{env.working-directory}}/vendor/sindla/aurora/tests/RequirementsTest.php --debug --no-coverage

            -   name: "Test Utils/Chronos"
                run: /usr/bin/php ${{env.working-directory}}/bin/phpunit ${{ env.PHPUNIT_FLAGS }} -c ${{env.working-directory}}/phpunit.xml ${{env.working-directory}}/vendor/sindla/aurora/tests/Utils/Chronos/ChronosTest.php --debug --no-coverage

            -   name: "Test Utils/Client"
                run: /usr/bin/php ${{env.working-directory}}/bin/phpunit ${{ env.PHPUNIT_FLAGS }} -c ${{env.working-directory}}/phpunit.xml ${{env.working-directory}}/vendor/sindla/aurora/tests/Utils/Client/ClientTest.php --debug --no-coverage

            -   name: "Test Utils/Match"
                run: /usr/bin/php ${{env.working-directory}}/bin/phpunit ${{ env.PHPUNIT_FLAGS }} -c ${{env.working-directory}}/phpunit.xml ${{env.working-directory}}/vendor/sindla/aurora/tests/Utils/Match/MatchTest.php --debug --no-coverage

            -   name: "Test Utils/Strink"
                run: /usr/bin/php ${{env.working-directory}}/bin/phpunit ${{ env.PHPUNIT_FLAGS }} -c ${{env.working-directory}}/phpunit.xml ${{env.working-directory}}/vendor/sindla/aurora/tests/Utils/Strink/StrinkTest.php --debug --no-coverage

        #            -   name: "Run tests"
        #                #run: vendor/bin/simple-phpunit ${{ env.PHPUNIT_FLAGS }} vendor/sindla/aurora/tests/Utils/Match/MatchTest.php --no-coverage
        #                run: ${{env.working-directory}}/vendor/bin/phpunit ${{ env.PHPUNIT_FLAGS }} ${{env.working-directory}}/vendor/sindla/aurora/tests/Utils/Match/MatchTest.php --no-coverage
        #                working-directory: ${{env.working-directory}}

        # Add a test script to composer.json, for instance: "test": "vendor/bin/phpunit"
        # Docs: https://getcomposer.org/doc/articles/scripts.md

        # - name: Run test suite
        #   run: composer run-script test