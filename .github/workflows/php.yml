name: PHPUnit

on:
    push:
        branches: [ "6.3" ]
    pull_request:
        branches: [ "6.3" ]

# Variables:
#   $HOME                       = /home/runner
#   ${{ github.workspace }}     = /home/runner/work/Aurora/Aurora
env:
    fail-fast: true
    working-directory: /home/runner/work/aurora
    BUILD_DIR: "${{ github.workspace }}/build" # /home/runner/work/Aurora/Aurora/build
    TMP_DIR: "${{ github.workspace }}/${{ github.run_id }}${{ github.run_attempt }}"
    AURORA_VERSION: 6.3
    PHPUNIT: "${{ env.BUILD_DIR }}/bin/phpunit"
    PHPUNIT_FLAGS: ""
    PHP_INI_VALUES: assert.exception=1, memory_limit=-1, zend.assertions=1, log_errors_max_len=0
    # $HOME = /home/runner
    SYMFONY_PHPUNIT_DIR: "$HOME/symfony-bridge/.phpunit"
    SYMFONY_REQUIRE: ">=6.3"

jobs:
    build:
        #runs-on: ubuntu-16.04 #ubuntu-latest
        runs-on: ubuntu-22.04
        strategy:
            fail-fast: true
            matrix:
                #operating-system: [ubuntu-16.04, ubuntu-18.04, ubuntu-20.04, debian-10, debian-11]
                #operating-system: [ubuntu-22.04, debian-11]
                operating-system: [ ubuntu-22.04 ]
                #php-versions: ['8.1', '8.2']
                php-versions: [ '8.2' ]
        name: PHP ${{ matrix.php-versions }} on ${{ matrix.operating-system }}
        steps:
            -   uses: actions/checkout@v3

            -   name: "Install PHP with extensions"
                uses: shivammathur/setup-php@v2
                with:
                    php-version: ${{ matrix.php-versions }}
                    coverage: "none"
                    extensions: intl
                    ini-values: ${{ env.PHP_INI_VALUES }}

            -   name: "Check versions"
                run: |
                    php --version
                    composer -V
                    . /etc/os-release && echo $PRETTY_NAME
                    ls -a ${{ github.workspace }}
                    mkdir -p ${{ env.BUILD_DIR }}
                    mkdir -p ${{ env.TMP_DIR }}
                    echo "\$github.workspace: ${{ github.workspace }}"
                    echo "\$env.BUILD_DIR: ${{ env.BUILD_DIR }}"
                    echo "\${{ env.TMP_DIR }} : ${{ env.TMP_DIR }}"
                    echo "Run id: ${{ github.run_id }}"
                    echo "Run attempt: ${{ github.run_attempt }}"

            -   name: "000"
                working-directory: ${{ env.BUILD_DIR }}
                run: |
                    composer create-project symfony/skeleton:${{env.AURORA_VERSION}}.x-dev . --no-cache
                    composer require sindla/aurora:${{env.AURORA_VERSION}}.x-dev --no-progress
                    composer require phpunit/phpunit:^9.6
                    composer require symfony/phpunit-bridge:${{env.AURORA_VERSION}}
                    cp -f ${{ github.workspace }}/phpunit.xml ${{ env.BUILD_DIR }}/phpunit.xml

            -   name: "001"
                run: |
                    composer clear-cache
                    composer dump-autoload

            -   name: "PHPUnit check 1/2"
                run: |
                    echo 'SED_STRICT_TYPES_FOUND<<EOF' >> $GITHUB_ENV
                    echo $(grep -c "strict_types" ${{env.working-directory}}/vendor/phpunit/phpunit/phpunit) >> $GITHUB_ENV
                    echo 'EOF' >> $GITHUB_ENV
                    echo "${{ env.SED_STRICT_TYPES_FOUND }}"

            -   name: "PHPUnit check 2/2"
                if: ${{ env.SED_STRICT_TYPES_FOUND == '1' || env.SED_STRICT_TYPES_FOUND == 1 }}
                run: sed -i -e "s/<?php/<?php declare(strict_types=0);/g" ${{env.working-directory}}/vendor/phpunit/phpunit/phpunit

            -   name: "Test RequirementsTest"
                run: |
                    /usr/bin/php ${{ env.BUILD_DIR }}/bin/phpunit ${{ env.PHPUNIT_FLAGS }} -c ${{ env.BUILD_DIR }}/phpunit.xml ${{ env.BUILD_DIR }}/vendor/sindla/aurora/tests/RequirementsTest.php --no-coverage
                    exit 0

            -   name: "Test /Command"
                run: /usr/bin/php ${{env.PHPUNIT}} ${{ env.PHPUNIT_FLAGS }} -c ${{env.working-directory}}/phpunit.xml ${{env.working-directory}}/vendor/sindla/aurora/tests/Command/ComposerCommandTest.php --no-coverage

            -   name: "Test /Console"
                run: /usr/bin/php ${{env.PHPUNIT}} ${{ env.PHPUNIT_FLAGS }} -c ${{env.working-directory}}/phpunit.xml ${{env.working-directory}}/vendor/sindla/aurora/tests/Console/SymfonyStyleFactoryTest.php --no-coverage

            -   name: "Test /Entity/SuperAnnotation"
                run: |
                    /usr/bin/php ${{env.PHPUNIT}} ${{ env.PHPUNIT_FLAGS }} -c ${{env.working-directory}}/phpunit.xml ${{env.working-directory}}/vendor/sindla/aurora/tests/Entity/SuperAnnotation/IdentifiableUUIDTest.php --no-coverage
                    /usr/bin/php ${{env.PHPUNIT}} ${{ env.PHPUNIT_FLAGS }} -c ${{env.working-directory}}/phpunit.xml ${{env.working-directory}}/vendor/sindla/aurora/tests/Entity/SuperAnnotation/TemporalTraitTest.php --no-coverage

            -   name: "Test /EventListener"
                run: /usr/bin/php ${{env.PHPUNIT}} ${{ env.PHPUNIT_FLAGS }} -c ${{env.working-directory}}/phpunit.xml ${{env.working-directory}}/vendor/sindla/aurora/tests/EventListener/OutputSubscriberTest.php --no-coverage

            -   name: "Test /Utils/Chronos"
                run: /usr/bin/php ${{env.PHPUNIT}} ${{ env.PHPUNIT_FLAGS }} -c ${{env.working-directory}}/phpunit.xml ${{env.working-directory}}/vendor/sindla/aurora/tests/Utils/Chronos/ChronosTest.php --no-coverage

            -   name: "Test /Utils/Client"
                run: /usr/bin/php ${{env.PHPUNIT}} ${{ env.PHPUNIT_FLAGS }} -c ${{env.working-directory}}/phpunit.xml ${{env.working-directory}}/vendor/sindla/aurora/tests/Utils/Client/ClientTest.php --no-coverage

            -   name: "Test /Utils/Diacritics"
                run: /usr/bin/php ${{env.PHPUNIT}} ${{ env.PHPUNIT_FLAGS }} -c ${{env.working-directory}}/phpunit.xml ${{env.working-directory}}/vendor/sindla/aurora/tests/Utils/Diacritics/DiacriticsTest.php --no-coverage

            -   name: "Test /Utils/Helper"
                run: /usr/bin/php ${{env.PHPUNIT}} ${{ env.PHPUNIT_FLAGS }} -c ${{env.working-directory}}/phpunit.xml ${{env.working-directory}}/vendor/sindla/aurora/tests/Utils/Helper/HelperTest.php --no-coverage

            -   name: "Test /Utils/IO"
                run: /usr/bin/php ${{env.PHPUNIT}} ${{ env.PHPUNIT_FLAGS }} -c ${{env.working-directory}}/phpunit.xml ${{env.working-directory}}/vendor/sindla/aurora/tests/Utils/IO/IOTest.php --no-coverage

            -   name: "Test /Utils/AuroraMatch"
                run: /usr/bin/php ${{env.PHPUNIT}} ${{ env.PHPUNIT_FLAGS }} -c ${{env.working-directory}}/phpunit.xml ${{env.working-directory}}/vendor/sindla/aurora/tests/Utils/AuroraMatch/AuroraMatchTest.php --no-coverage

            -   name: "Test /Utils/Strink"
                run: /usr/bin/php ${{env.PHPUNIT}} ${{ env.PHPUNIT_FLAGS }} -c ${{env.working-directory}}/phpunit.xml ${{env.working-directory}}/vendor/sindla/aurora/tests/Utils/Strink/StrinkTest.php --no-coverage

            -   name: "Test /Utils/Twig"
                run: /usr/bin/php ${{env.PHPUNIT}} ${{ env.PHPUNIT_FLAGS }} -c ${{env.working-directory}}/phpunit.xml ${{env.working-directory}}/vendor/sindla/aurora/tests/Utils/Twig/UtilityExtensionTest.php --no-coverage
































            -   name: "000"
                working-directory: ${{ env.BUILD_DIR }}
                run: |
                    cp ${{ github.workspace }}/composer.json ${{ env.BUILD_DIR }}/composer.json
                    composer install --prefer-dist --no-progress --no-cache --no-scripts
                    mkdir -p ${{ env.BUILD_DIR }}
                    mkdir -p ${{ env.TMP_DIR }}/skeleton
                    composer create-project symfony/skeleton:${{env.AURORA_VERSION}}.x-dev . --no-cache
                    mv -f ${{ env.TMP_DIR }}/skeleton/* ${{ env.TMP_DIR }}/skeleton/.[!.]* ${{ env.BUILD_DIR }}/
                    ls -a ./vendor
                    /usr/bin/php bin/console about
                    composer require sindla/aurora:${{env.AURORA_VERSION}}.x-dev --no-progress
                    ls -a ./vendor
                    cp
                    /usr/bin/php ${{ env.BUILD_DIR }}/bin/phpunit ${{ env.PHPUNIT_FLAGS }} -c ${{ env.BUILD_DIR }}/phpunit.xml ${{ env.BUILD_DIR }}/vendor/sindla/aurora/tests/RequirementsTest.php --no-coverage
                    exit 1















            -   name: "Run `composer install` inside default project directory"
                working-directory: ${{ github.workspace }}
                run: |
                    composer install --prefer-dist --no-progress --no-cache --no-scripts


            -   name: "Create project symfony/skeleton"
                working-directory: ${{ github.workspace }}
                run: |
                    mkdir -p ${{ env.TMP_DIR }}/skeleton
                    composer create-project symfony/skeleton:${{env.AURORA_VERSION}}.x-dev ${{ env.TMP_DIR }}/skeleton --no-cache
                    mv -f ${{ env.TMP_DIR }}/skeleton/* ${{ env.TMP_DIR }}/skeleton/.[!.]* ${{ github.workspace }}/
                    /usr/bin/php bin/console about


            -   name: "Install sindla/aurora in a temporary directory"
                working-directory: ${{ env.TMP_DIR }}
                run: |
                    composer require sindla/aurora:${{env.AURORA_VERSION}}.x-dev --no-progress
                    ls -a ${{ env.TMP_DIR }}
                    ls -a ${{ github.workspace }}/vendor
                    exit 1






            -   name: "1"
                run: |
                    composer install
                    ls -a ${{ github.workspace }}/vendor
                    mkdir -p ${{env.working-directory}}

            -   name: "2"
                run: |
                    rm -f ${{ github.workspace }}/composer.*

            -   name: "3"
                run: |
                    composer require sindla/aurora:${{env.AURORA_VERSION}}.x-dev --no-progress














            -   name: "4"
                working-directory: ${{ env.working-directory }}
                run: |
                    composer require sindla/aurora:${{env.AURORA_VERSION}}.x-dev --no-progress
                    ls -a ${{ env.working-directory }}
                    exit 1




















            -   name: "Create project symfony/skeleton"
                run: |
                    mkdir -p ${{env.working-directory}}/skeleton
                    composer create-project symfony/skeleton:${{env.AURORA_VERSION}}.x-dev ${{env.working-directory}}/skeleton --no-cache

            # https://unix.stackexchange.com/questions/6393/how-do-you-move-all-files-including-hidden-from-one-directory-to-another
            # Move * (including .dot files)
            -   name: "Move symfony/skeleton"
                run: |
                    mv -f ${{env.working-directory}}/skeleton/* ${{env.working-directory}}/skeleton/.[!.]* ${{env.working-directory}}/




            -   name: "Install sindla/aurora"
                run: if [[ -f "composer.json" ]]; then composer config minimum-stability dev; fi; composer require sindla/aurora:${{env.AURORA_VERSION}}.x-dev --no-progress
                working-directory: ${{env.working-directory}}

            -   name: "Overwrite sindla/aurora"
                run: |
                    cp -Rf /home/runner/work/Aurora/Aurora/* ${{env.working-directory}}/vendor/sindla/aurora/
                    mkdir -p ${{env.working-directory}}/app/config/
                    cp -f /home/runner/work/Aurora/Aurora/.github/app/config/routes.yaml ${{env.working-directory}}/app/config/routes.yaml





            -   name: "mkdir"
                run: mkdir -p ${{env.working-directory}}/vendor/sindla/aurora/

            -   name: "Copy A"
                run: cp -Rf /home/runner/work/Aurora/Aurora/* ${{env.working-directory}}/vendor/sindla/aurora/

            #            -   name: "Copy composer.json"
            #                run: cp -Rf ${{env.working-directory}}/vendor/sindla/aurora/composer.json ${{env.working-directory}}/composer.json

            -   name: "X"
                run: |
                    cp -Rf ${{env.working-directory}}/vendor/sindla/aurora/composer.json ${{env.working-directory}}/composer.json

            -   name: "Copy phpunit.xml"
                run: cp -Rf ${{env.working-directory}}/vendor/sindla/aurora/phpunit.xml ${{env.working-directory}}/phpunit.xml

            -   name: "Create /tests directory"
                run: mkdir -p ${{env.working-directory}}/tests/

            -   name: "Copy bootstrap.php"
                run: cp -Rf ${{env.working-directory}}/vendor/sindla/aurora/tests/bootstrap.php ${{env.working-directory}}/tests/bootstrap.php

            -   name: "Install composer dependencies"
                run: |
                    composer config --no-plugins allow-plugins.symfony/flex true
                    composer config --no-plugins allow-plugins.symfony/runtime true
                    composer update
                    composer install --prefer-dist --no-progress --no-cache --no-scripts
                working-directory: ${{env.working-directory}}

            #            -   name: "Install sindla/aurora"
            #                run: if [[ -f "composer.json" ]]; then composer config minimum-stability dev; fi; composer require sindla/aurora:${{env.AURORA_VERSION}}.x-dev --no-progress
            #                working-directory: ${{env.working-directory}}
            #
            #            -   name: "Overwrite sindla/aurora"
            #                run: |
            #                    cp -Rf /home/runner/work/Aurora/Aurora/* ${{env.working-directory}}/vendor/sindla/aurora/
            #                    mkdir -p ${{env.working-directory}}/app/config/
            #                    cp -f /home/runner/work/Aurora/Aurora/.github/app/config/routes.yaml ${{env.working-directory}}/app/config/routes.yaml

            # After sindla/aurora is overwrited, reload autoloader: because the sindla/aurora is not always in sync with the `main` branch
            -   name: "Update/reload the composer autoloader"
                run: |
                    composer clear-cache
                    composer dump-autoload
            #
            # Works, no longer need it
            #
            #            -   name: "Install Simple PHPUnit"
            #                run: vendor/bin/simple-phpunit install
            #                working-directory: ${{env.working-directory}}
            #
            #            -   name: "Simple PHPUnit version"
            #                run: vendor/bin/simple-phpunit --version
            #                working-directory: ${{env.working-directory}}
            #
            #            -   name: "List"
            #                run: ls -a ${{env.working-directory}}
            #
            #            -   name: "List vendor"
            #                run: ls -a ${{env.working-directory}}/vendor/

            #            -   name: "test 1"
            #                run: sed -i -e "s|#!/usr/bin/env php||g" ${{env.working-directory}}/vendor/phpunit/phpunit/phpunit

            #            -   name: "php-actions/phpunit@v2"
            #                uses: php-actions/phpunit@v2
            #                #                env:
            #                #                    TEST_NAME: Scarlett
            #                with:
            #                    bootstrap: ${{env.working-directory}}/tests/bootstrap.php
            #                    configuration: ${{env.working-directory}}/phpunit.xml
            #                    args: --coverage-text
            #                    version: 9.4.4

            -   name: "PHPUnit check 1/2"
                run: |
                    echo 'SED_STRICT_TYPES_FOUND<<EOF' >> $GITHUB_ENV
                    echo $(grep -c "strict_types" ${{env.working-directory}}/vendor/phpunit/phpunit/phpunit) >> $GITHUB_ENV
                    echo 'EOF' >> $GITHUB_ENV
                    echo "${{ env.SED_STRICT_TYPES_FOUND }}"

            -   name: "PHPUnit check 2/2"
                if: ${{ env.SED_STRICT_TYPES_FOUND == '1' || env.SED_STRICT_TYPES_FOUND == 1 }}
                run: sed -i -e "s/<?php/<?php declare(strict_types=0);/g" ${{env.working-directory}}/vendor/phpunit/phpunit/phpunit

            -   name: "PHPUnit"
                run: |
                    cat ${{env.PHPUNIT}}
                    /usr/bin/php ${{env.PHPUNIT}} --version
                    /usr/bin/php ${{env.PHPUNIT}} ${{ env.PHPUNIT_FLAGS }} -c ${{env.working-directory}}/phpunit.xml --help

            -   name: "X1"
                run: ls -a ${{env.working-directory}}/vendor/

            -   name: "X2"
                run: ls -a ${{env.working-directory}}/vendor/sindla/

            -   name: "X3"
                run: ls -a ${{env.working-directory}}/vendor/sindla/aurora/

            -   name: "X4"
                run: ls -a ${{env.working-directory}}/vendor/sindla/aurora/tests/

            -   name: "Test RequirementsTest"
                run: /usr/bin/php ${{env.PHPUNIT}} ${{ env.PHPUNIT_FLAGS }} -c ${{env.working-directory}}/phpunit.xml ${{env.working-directory}}/vendor/sindla/aurora/tests/RequirementsTest.php --no-coverage

            -   name: "Test /Command"
                run: /usr/bin/php ${{env.PHPUNIT}} ${{ env.PHPUNIT_FLAGS }} -c ${{env.working-directory}}/phpunit.xml ${{env.working-directory}}/vendor/sindla/aurora/tests/Command/ComposerCommandTest.php --no-coverage

            -   name: "Test /Console"
                run: /usr/bin/php ${{env.PHPUNIT}} ${{ env.PHPUNIT_FLAGS }} -c ${{env.working-directory}}/phpunit.xml ${{env.working-directory}}/vendor/sindla/aurora/tests/Console/SymfonyStyleFactoryTest.php --no-coverage

            #            -   name: "Test /Controller/Blackhole"
            #                run: /usr/bin/php ${{env.PHPUNIT}} ${{ env.PHPUNIT_FLAGS }} -c ${{env.working-directory}}/phpunit.xml ${{env.working-directory}}/vendor/sindla/aurora/tests/Controller/BlackHoleControllerTest.php --no-coverage

            -   name: "Test /Entity/SuperAnnotation"
                run: |
                    /usr/bin/php ${{env.PHPUNIT}} ${{ env.PHPUNIT_FLAGS }} -c ${{env.working-directory}}/phpunit.xml ${{env.working-directory}}/vendor/sindla/aurora/tests/Entity/SuperAnnotation/IdentifiableUUIDTest.php --no-coverage
                    /usr/bin/php ${{env.PHPUNIT}} ${{ env.PHPUNIT_FLAGS }} -c ${{env.working-directory}}/phpunit.xml ${{env.working-directory}}/vendor/sindla/aurora/tests/Entity/SuperAnnotation/TemporalTraitTest.php --no-coverage

            -   name: "Test /EventListener"
                run: /usr/bin/php ${{env.PHPUNIT}} ${{ env.PHPUNIT_FLAGS }} -c ${{env.working-directory}}/phpunit.xml ${{env.working-directory}}/vendor/sindla/aurora/tests/EventListener/OutputSubscriberTest.php --no-coverage

            -   name: "Test /Utils/Chronos"
                run: /usr/bin/php ${{env.PHPUNIT}} ${{ env.PHPUNIT_FLAGS }} -c ${{env.working-directory}}/phpunit.xml ${{env.working-directory}}/vendor/sindla/aurora/tests/Utils/Chronos/ChronosTest.php --no-coverage

            -   name: "Test /Utils/Client"
                run: /usr/bin/php ${{env.PHPUNIT}} ${{ env.PHPUNIT_FLAGS }} -c ${{env.working-directory}}/phpunit.xml ${{env.working-directory}}/vendor/sindla/aurora/tests/Utils/Client/ClientTest.php --no-coverage

            -   name: "Test /Utils/Diacritics"
                run: /usr/bin/php ${{env.PHPUNIT}} ${{ env.PHPUNIT_FLAGS }} -c ${{env.working-directory}}/phpunit.xml ${{env.working-directory}}/vendor/sindla/aurora/tests/Utils/Diacritics/DiacriticsTest.php --no-coverage

            -   name: "Test /Utils/Helper"
                run: /usr/bin/php ${{env.PHPUNIT}} ${{ env.PHPUNIT_FLAGS }} -c ${{env.working-directory}}/phpunit.xml ${{env.working-directory}}/vendor/sindla/aurora/tests/Utils/Helper/HelperTest.php --no-coverage

            -   name: "Test /Utils/IO"
                run: /usr/bin/php ${{env.PHPUNIT}} ${{ env.PHPUNIT_FLAGS }} -c ${{env.working-directory}}/phpunit.xml ${{env.working-directory}}/vendor/sindla/aurora/tests/Utils/IO/IOTest.php --no-coverage

            -   name: "Test /Utils/AuroraMatch"
                run: /usr/bin/php ${{env.PHPUNIT}} ${{ env.PHPUNIT_FLAGS }} -c ${{env.working-directory}}/phpunit.xml ${{env.working-directory}}/vendor/sindla/aurora/tests/Utils/AuroraMatch/AuroraMatchTest.php --no-coverage

            -   name: "Test /Utils/Strink"
                run: /usr/bin/php ${{env.PHPUNIT}} ${{ env.PHPUNIT_FLAGS }} -c ${{env.working-directory}}/phpunit.xml ${{env.working-directory}}/vendor/sindla/aurora/tests/Utils/Strink/StrinkTest.php --no-coverage

            -   name: "Test /Utils/Twig"
                run: /usr/bin/php ${{env.PHPUNIT}} ${{ env.PHPUNIT_FLAGS }} -c ${{env.working-directory}}/phpunit.xml ${{env.working-directory}}/vendor/sindla/aurora/tests/Utils/Twig/UtilityExtensionTest.php --no-coverage

        #            -   name: "Run tests"
        #                #run: vendor/bin/simple-phpunit ${{ env.PHPUNIT_FLAGS }} vendor/sindla/aurora/tests/Utils/Match/MatchTest.php --no-coverage
        #                run: ${{env.working-directory}}/vendor/bin/phpunit ${{ env.PHPUNIT_FLAGS }} ${{env.working-directory}}/vendor/sindla/aurora/tests/Utils/Match/MatchTest.php --no-coverage
        #                working-directory: ${{env.working-directory}}

        # Add a test script to composer.json, for instance: "test": "vendor/bin/phpunit"
        # Docs: https://getcomposer.org/doc/articles/scripts.md

        # - name: Run test suite
        #   run: composer run-script test
